<<SourceR,results=hide,echo=FALSE>>=
library(favir)
InitPaper()
@ 

<<LatexPrelude,echo=FALSE,results=tex>>=
IncludePrelude("Feature Tour", "Benedict Escoto")
@ 

\begin{abstract}
  This paper intended as an initial tour of the functions included in
  the FAViR package.  It itself is an example of a FAViR paper that
  uses these functions.
\end{abstract}

\section{Introduction}

The R package component of FAViR includes several formatting functions
which make writing FAViR papers more convenient.  They are covered in
the package manual pages but some only make sense inside a FAViR
paper.  This paper demonstrates each of these functions and can be
used as a quick-reference or a feature tour of the FAViR package.

When reading the PDF version of this paper, please follow along in the
associated Sweave (.Rnw) version.



\section{LaTeX}

LaTeX commands are available inside the LaTeX (non-R) sections of a
FAViR paper.  In particular:

\begin{itemize}
  \item \emph{text in italics}
  \item \textbf{boldface text}
  \item \texttt{typewriter font}
  \item {\tiny tiny} {\scriptsize script} {\footnotesize footnote}
    {\small small} {\normalsize  normal} {\large large} {\Large  Large}
    {\LARGE  LARGE} {\huge huge} {\Huge Huge}
\end{itemize}

\begin{center}
  This text is centered.
\end{center}

\begin{enumerate}
  \item This list is numbered.
  \item And it has equations like $3 \leq 4$ and
    $1 + \frac{1}{2^2} + \frac{1}{3^2} + \cdots + \frac{1}{n^2} + 
      \cdots = \sum_{i=1}^{\infty} \frac{1}{i^2} = \frac{\pi^2}{6}$
\end{enumerate}

\noindent
You can also have numbered, centered equations, like equation
(\ref{equation}) below.

\begin{eqnarray}
  K(x) = \left\{ 
  \begin{array}{l l}
    \frac{3}{4}(1-x^2/5)/\sqrt{5} & \quad |x| < \sqrt{5}\\
    0 & \quad \mbox{otherwise}\\
  \end{array}\right. \label{equation}
\end{eqnarray}

\noindent
LaTeX has far too many features to demonstrate here, so please consult
the internet for general LaTeX help.



\section{Sweave}

Sweave allows R code to be included in a paper and automatically
executed.  Below is the most basic Sweave mode, where both R commands
and their output are printed:

<<basicSweave>>=
2+2
1:10
@

\noindent
However, the output of this mode generally doesn't look very polished.
A more powerful technique is not to display the R commands, but have
them generate LaTeX output directly.  This is how most code segments
in FAViR papers are run.

<<texOutput,results=tex,echo=FALSE>>=
cat("\\begin{center}This LaTeX is generated by R\\end{center}")
cat(paste("\\[\\sum_{i=1}^{100} \\mbox{log}(i) \\approx ",
          sum(log(1:100)), "\\]"))
@ 

\noindent
Note the double backslashes in the above R code.  When that code is
evaluated by R, each double backslash becomes a single backslash which
is then evaluated by LaTeX.

It's also possible to run R without displaying the results

<<hidden,results=hide,echo=FALSE>>=
a <- 3
Assert(a == 3)
"You can't see this!"
@ 

\noindent
or even in the \emph{\Sexpr{paste("mid", "le", sep="d")}} of a sentence.



\section{FAViR Data Frames}

This section is about presenting tabular data in R data frames.  First
we'll define a simple data frame and then progressively refine its
presentation by using FAViR functions.

An easy way to present a data frame is by using basic Sweave mode:

<<sweaveDF>>=
df <- data.frame(year=2000:2008,
                 prem.a=200000 * rnorm(9, 1, 0.1),
                 loss.a=130000 * rnorm(9, 1, 0.2),
                 loss.ratio.a=0,
                 prem.b=50000 * rnorm(9, 1, 0.1),
                 loss.b=30000 * rnorm(9, 1, 0.2),
                 loss.ratio.b=0)
df$loss.ratio.a <- df$loss.a / df$prem.a
df$loss.ratio.b <- df$loss.b / df$prem.b
df                 
@ 

However the results are obviously rough.  We can improve on this by
using a FavirDF object:

<<favirDF,results=tex,echo=FALSE>>=
fdf <- FavirDF(df)
print(fdf)
@ 

The results are now displayed in a figure.  LaTeX does not necessarily
display figures where they are defined---it uses an algorithm to
place them where it thinks they will fit.  It's good practice to add
labels and captions to each FavirDF, so it's clear which table is
being referred to.

<<labelAndCaption,results=tex,echo=FALSE>>=
Label(fdf) <- "with label"
Caption(fdf) <- "This FavirDF has a label and caption."
print(fdf)
@ 

Figure \ref{with label} has a label and caption.  It arguably looks
better than the simple Sweave version, but the headers are chosen for
R programming convenience and are not ideal for presentation.

\subsection{Table Headings}

We can change the headings by using the \texttt{FieldHeadings}
function.  Figure \ref{headings} has better column headings.

<<headings,results=tex,echo=FALSE>>=
FieldHeadings(fdf) <- c(year="Calendar Year",
                        prem.a="Earned Premium Line A",
                        loss.a="Ultimate Loss Line A",
                        loss.ratio.a="Loss Ratio Line A",
                        prem.b="Earned Premium Line B",
                        loss.b="Ultimate Loss Line B",
                        loss.ratio.b="Loss Ratio Line B")
Label(fdf) <- "headings"
Caption(fdf) <- "Table with better column headings"
print(fdf)                        
@ 

In figure \ref{group headings} we do even better by grouping the lines
of business.

<<groupHeadings,results=tex,echo=FALSE>>=
FieldGroup(fdf, "line.a") <- c("prem.a", "loss.a", "loss.ratio.a")
FieldGroup(fdf, "line.b") <- c("prem.b", "loss.b", "loss.ratio.b")
GroupHeading(fdf, "line.a") <- "Line of Business A"
GroupHeading(fdf, "line.b") <- "Line of Business B"
FieldHeadings(fdf) <- c(year="Calendar Year",
                        prem.a="Earned Premium",
                        loss.a="Ultimate Loss",
                        loss.ratio.a="Loss Ratio",
                        prem.b="Earned Premium",
                        loss.b="Ultimate Loss",
                        loss.ratio.b="Loss Ratio")

Label(fdf) <- "group headings"
Caption(fdf) <- "Table with group headings"
print(fdf)
@ 

\clearpage

\subsection{Entry Formatting}

This table is starting to look decent, but the numbers are not
formatted correctly.  You can specify arbitrary formatting functions
per field, but several standard ones are built into the FAViR package.
In figure \ref{formatted} the loss ratio and years columns have been
reformatted.

<<formattedFDF,results=tex,echo=FALSE>>=
FieldFormatters(fdf) <- list(year=formatters$flat,
                             loss.ratio.a=formatters$percent,
                             loss.ratio.b=formatters$percent)
FieldHeadings(fdf) <- c("loss.ratio.a"="Loss Ratio (\\%)",
                        "loss.ratio.b"="Loss Ratio (\\%)")
Label(fdf) <- "formatted"
Caption(fdf) <- "Table with formatted entries"
print(fdf)
@ 

Note also that LaTeX moved some of the earlier figures onto other
pages because there were ``too many'' figures and not enough text.  At
the start of this section we have manually forced all figures to be
placed in order to start fresh.

\subsection{Final Table}

The last change we will make is to add a summary row.  Figure 
\ref{final table} demonstrates this.

<<finalFDF,results=tex,echo=FALSE>>=
SummaryRow(fdf) <- list(year="Total",
                        prem.a=sum(fdf$prem.a),
                        loss.a=sum(fdf$loss.a),
                        loss.ratio.a=sum(fdf$loss.a) / sum(fdf$prem.a),
                        prem.b=sum(fdf$prem.b),
                        loss.b=sum(fdf$loss.b),
                        loss.ratio.b=sum(fdf$loss.b) / sum(fdf$prem.b))
Label(fdf) <- "final table"
Caption(fdf) <- "Final table with summary row"
print(fdf)
@ 
\clearpage



\section{Graphics}

\emph{ggplot2} is an advanced graphing package for R.  The ``gg''
stands for ``grammar of graphics''.  The idea is that you just need to
learn a few basic graphing concepts (such as geoms, aesthetics, and
scales) and then you can combine them in myriad ways to create great
custom plots.  There is lots of documentation for ggplot2; this paper
just demonstrates the FAViR functions which include them into a paper.

Figure \ref{basic graph} is a simple graph made with ggplot2.

<<basicGraph,results=tex,echo=FALSE>>=
xvals <- -50:50
p1 <- qplot(x=xvals, y=xvals^2)
IncludeGraph(p1, caption="Basic graph with ggplot2", label="basic graph")
@ 

The size can be adjusted with the \texttt{height} and \texttt{width}
parameters as shown in figure \ref{small graph}.

<<basicGraph,results=tex,echo=FALSE>>=
p2 <- qplot(x=xvals, y=xvals^2, geom="line")
IncludeGraph(p2, caption="Smaller Graph", label="small graph",
             height=5, width=5)
@ 

Figure \ref{grid} shows how you can easily put multiple graphs into
different viewports with the \texttt{IncludeGrid} function.  However,
if the graphs all have comparable values in them, it's probably better
to use ggplot2's powerful faceting functionality.

<<grid,results=tex,echo=FALSE>>=
p3 <- qplot(rnorm(500))
observations <- xvals^2 + rnorm(101, 0, 500)
p4 <- (qplot(xvals, observations)
       + geom_smooth(aes(x=xvals, y=observations))
       + geom_line(aes(x=xvals, y=xvals^2), color=favir.colors["M5"])
       + labs(x="X Values", y="Observed vs Fitted"))
IncludeGrid(list("1.1"=p1, "1.2"=p2, "2.1"=p3, "2.2"=p4),
            label="grid", caption="Four separate plots in one grid")
@ 

Our final feature demonstration is to automatically include some legal
boilerplate in the next section.



\section{Legal}

<<Legal,echo=FALSE,results=tex>>=
IncludeLegal("FAViR Project", 2010)
@

\end{document}
